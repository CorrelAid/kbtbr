[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"kbtbr initiated within CorrelAid. , falls CorrelAid Code Conduct.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"How to contribute to kbtbr","text":"kbtbr initiated within CorrelAid. , falls CorrelAid Code Conduct.","code":""},{"path":"/CONTRIBUTING.html","id":"reporting-issues","dir":"","previous_headings":"","what":"Reporting issues","title":"How to contribute to kbtbr","text":"Issue reports always welcome. Please provide Reprex possible. might possible nature kbtbr package. case, please describe problem well possible, including screenshots HTTP responses (excluding sensitive data API tokens).","code":""},{"path":"/CONTRIBUTING.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"How to contribute to kbtbr","text":"welcome contributions form Pull Requests. opening PR, please open issue describing problem ’d like working maintainers can discuss issue propose feasible solution approaches.","code":""},{"path":"/CONTRIBUTING.html","id":"code-styling","dir":"","previous_headings":"Contribute","what":"Code styling","title":"How to contribute to kbtbr","text":"Please style code following styler command:","code":"styler::style_pkg(style = styler::tidyverse_style, indent_by = 4)"},{"path":[]},{"path":"/CONTRIBUTING.html","id":"branching-model","dir":"","previous_headings":"Contribute > Package development workflow","what":"Branching model","title":"How to contribute to kbtbr","text":"follow feature (topic) branching workflow. means create new Git branch issue (set related issues) working . branch name contain issue number allow easier cross-referencing.","code":""},{"path":"/CONTRIBUTING.html","id":"long-lived-branches","dir":"","previous_headings":"Contribute > Package development workflow","what":"Long-lived branches","title":"How to contribute to kbtbr","text":"main: default branch. contain releases package + hotfixes (small, critical bug fixes can’t wait next release) dev: develop branch feature branches","code":""},{"path":"/CONTRIBUTING.html","id":"short-lived-branches","dir":"","previous_headings":"Contribute > Package development workflow","what":"Short-lived branches","title":"How to contribute to kbtbr","text":"Short-lived branches feature development bugfixes (“feature branches”) branched dev branch. making Pull Request dev, pull changes dev branch avoid running merge conflicts. feature branch checked , run:","code":"# create branch from dev branch git checkout dev git switch -c 1-project-skeleton # or git checkout -b 1-project-skeleton # ... work on your branch with add, commit, push git merge dev"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 kbtbr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/dev_only/response_overview.html","id":"general-notes-and-setup","dir":"Articles > Dev_only","previous_headings":"","what":"General notes and setup","title":"Overview over different API endpoints","text":"url data URLs contain almost relevant information. accessible assets data frame variables url data. (Download) links: general, (download) links returned JSON responses seem mostly broken / resulting 404 almost always ?format=json appended URL. can also seen compare links browser view assets list data get making GET request format=json query. Luckily, can reconstruct URLs easily uid asset additional information. get test elements, get element asset type:","code":"assets %>%    select(url, data) test_elements <- assets %>%    group_by(asset_type) %>%    arrange(desc(deployment__submission_count)) %>% # reverse sort by submissions to get a survey with submissions   slice(1) test_elements$asset_type"},{"path":[]},{"path":"/articles/dev_only/response_overview.html","id":"get-general-information-about-an-asset","dir":"Articles > Dev_only","previous_headings":"Use cases","what":"Get general information about an asset","title":"Overview over different API endpoints","text":"Get name asset list assets: Get uid asset list assets: Additional information assets:","code":"assets$name assets$uid summary(str(assets, max.level = 1))"},{"path":"/articles/dev_only/response_overview.html","id":"get-responses-to-a-survey","dir":"Articles > Dev_only","previous_headings":"Use cases","what":"Get responses to a survey","title":"Overview over different API endpoints","text":"can get submissions survey data url (also accessible via assets data frame). Conveniently, already parsed data frame results response:","code":"submissions <- test_elements %>%    filter(asset_type == \"survey\") %>%    pull(data) %>%    removeBaseUrl() %>%   kobo$get() submissions$results"},{"path":"/articles/dev_only/response_overview.html","id":"get-permissions-of-an-asset","dir":"Articles > Dev_only","previous_headings":"Use cases","what":"Get permissions of an asset","title":"Overview over different API endpoints","text":"asset types permissions data frame, one row per user permission granted.","code":"test_elements %>%    filter(asset_type == \"survey\") %>%    pull(permissions)"},{"path":"/articles/dev_only/response_overview.html","id":"get-form-metadata-xlsform","dir":"Articles > Dev_only","previous_headings":"Use cases","what":"Get form metadata / XLSForm","title":"Overview over different API endpoints","text":"Metadata structure forms, questions, templates blocks can found content element response url URL. example survey:","code":""},{"path":"/articles/dev_only/response_overview.html","id":"content","dir":"Articles > Dev_only","previous_headings":"Use cases > Get form metadata / XLSForm","what":"content","title":"Overview over different API endpoints","text":"contains list representation XLSForm, two main Excel sheets survey choices nested list data frames. additional variables exist Kobo-unique prefixed $:","code":"survey_url_data <- test_elements %>%    filter(asset_type == \"survey\") %>%    pull(url) %>%    removeBaseUrl() %>%    kobo$get()  str(survey_url_data$content, max.level = 1) colnames(survey_url_data$content$survey) %>% knitr::kable() colnames(survey_url_data$content$choices) %>% knitr::kable()"},{"path":"/articles/dev_only/response_overview.html","id":"summary","dir":"Articles > Dev_only","previous_headings":"Use cases > Get form metadata / XLSForm","what":"summary","title":"Overview over different API endpoints","text":"Potentially also relevant summary element.","code":"survey_url_data$summary"},{"path":"/articles/dev_only/response_overview.html","id":"xml","dir":"Articles > Dev_only","previous_headings":"Use cases > Get form metadata / XLSForm","what":"xml","title":"Overview over different API endpoints","text":"get xlsform xml use assets/{uid}/xmlform/ currently work correct HTTP headers / stream content yet. might worthwhile implement . corresponds “fixed” version :","code":"# kobo$get(glue::glue(\"assets/{survey_url_data$uid}/xform/\"), query = list()) survey_url_data$xform_link"},{"path":"/articles/dev_only/response_overview.html","id":"xls-in-browser","dir":"Articles > Dev_only","previous_headings":"Use cases > Get form metadata / XLSForm","what":"“xls” in browser??","title":"Overview over different API endpoints","text":"something similar also exists assets/{uid}/xls/, e.g. https://kobo.correlaid.org/api/v2/assets/aRo4wg5utWT7dwdnQQEAE7/xls/ corresponding fixed version :","code":"survey_url_data$xls_link"},{"path":[]},{"path":"/articles/dev_only/response_overview.html","id":"xlsform","dir":"Articles > Dev_only","previous_headings":"Use cases > File Downloads","what":"XLSForm","title":"Overview over different API endpoints","text":"download XLSForm file, can use either: - assets/{uid}.xls (xls) - assets/{uid}.xml (xml) urls correspond fixed versions :","code":"uid <- survey_url_data$uid kc <- KoboClient$new(base_url) # AT some point this worked?!  # kc$get(glue::glue(\"api/v2/assets/{uid}.xls\"), query = list(), disk = \"xls_form_downloaded.xls\") #  # kc$get(glue::glue(\"api/v2/assets/{uid}.xml\"), query = list(), disk = \"xls_form_downloaded.xml\") # we could also use the uid as the filename of course! survey_url_data$downloads$url"},{"path":"/articles/dev_only/response_overview.html","id":"exports","dir":"Articles > Dev_only","previous_headings":"Use cases > File Downloads","what":"Exports","title":"Overview over different API endpoints","text":"can also download exports created UI (via API?) https://kobo.correlaid.org/exports/","code":"exports <- kc$   get(\"exports\") exports$results$data # metadata about the export exports$results$data$source # the asset the export was made of  # download link exports$results$result # TODO: also make it possible to pass direct link and/or  # remove the base_url # kc$get(\"private-media/api_user/exports/kbtbr_test_survey_applications_-_all_versions_-_English_en_-_2021-04-28-20-00-36.xlsx\", disk = \"export_downloaded.xls\")"},{"path":"/articles/dev_only/response_overview.html","id":"overview-comparison","dir":"Articles > Dev_only","previous_headings":"","what":"Overview / Comparison","title":"Overview over different API endpoints","text":"section compares three main endpoints interest across four main asset types survey, template, block question. three endpoints : - assets: general “list” endpoint - url: exists asset, provides detailed information list entry asset assets - data: holds data related asset, seems relevant asset type survey holds survey submissions","code":""},{"path":"/articles/dev_only/response_overview.html","id":"data-from-the-url-url","dir":"Articles > Dev_only","previous_headings":"Overview / Comparison","what":"Data from the url url","title":"Overview over different API endpoints","text":"First, GET data url URL “test” objects. now build table columns name type hold names list elements respectively asset type. also extract column names assets data frame compare names list elements: asset types elements url return object. also see quite lot metadata seems already available assets data frame get assets/ endpoint (cross-checking values indeed beneficial - attempt made ).","code":"# data from \"url\" url url_data <- test_elements$url %>%    map(function(url) {     kobo$get(removeBaseUrl(url))   }) %>%    set_names(paste0(test_elements$asset_type, \"_url\")) # extract the names of the assets data frame assets_names <- tibble(name = colnames(assets), type = \"assets\") # extract the names from the object names_df <- url_data %>%    map_dfr(function(el) {     names(el)   }) %>%    pivot_longer(everything(), names_to = \"type\", values_to = \"name\") %>%    bind_rows(assets_names) # combine with assets_df names_df %>%    janitor::tabyl(name, type) %>%      knitr::kable()"},{"path":"/articles/dev_only/response_overview.html","id":"data-from-the-data-url","dir":"Articles > Dev_only","previous_headings":"Overview / Comparison","what":"Data from the data url","title":"Overview over different API endpoints","text":"data url, get mixed pattern. survey objects, results contain submissions survey data frame empty list submissions (empty data frame variables!). template block types, get 404, question type 400 (bad request). must investigated whether bug CorrelAid server intended, e.g. testing official Kobo server. metadata questions, templates blocks “content” element url data - see - might well intentionally “data” type.","code":"data_data <- test_elements$data %>%    map(function(url) {     # \"data\" url seems to be 404 except for surveys, so try-catch it     # might also be different if we use questions, blocks, templates more seriously?     tmp <- tryCatch(       kobo$get(removeBaseUrl(url))$results,       error = function(e) e$message     )     tmp   }) %>%    set_names(paste(test_elements$asset_type, \"data\", sep = \"_\"))  str(data_data, max.level = 1)"},{"path":"/articles/dev_only/response_overview.html","id":"in-depth-analysis","dir":"Articles > Dev_only","previous_headings":"","what":"In depth analysis","title":"Overview over different API endpoints","text":"bold elements seem particularly interesting us construction response classes.","code":""},{"path":"/articles/dev_only/response_overview.html","id":"asset-data-frame","dir":"Articles > Dev_only","previous_headings":"In depth analysis","what":"Asset data frame","title":"Overview over different API endpoints","text":"asset_type url data: urls ’ll give us information specific assets name: name asset owner owner__username: api url owner human-readable username uid: unique id asset, used urls.. suppose doesn’t make lot sense use construct urls given always nicely handed us API settings: sector, country deployed, description given user version deployment* columns: information version current deployment permissions: permissions asset, one row per user permission given.","code":"colnames(assets) table(assets$asset_type) assets %>%    select(url, data) colnames(assets$settings) str(assets$settings) assets %>%    select(starts_with(\"deployment\"), version_id) str(assets$permissions[[1]], max.level = 1)"},{"path":"/articles/dev_only/response_overview.html","id":"survey","dir":"Articles > Dev_only","previous_headings":"In depth analysis","what":"Survey","title":"Overview over different API endpoints","text":"detailed overview elements type character, logical numeric displayed. Finally, sublists displayed separately - roughly - decreasing order interest, whereby sublist content might particular interest.","code":"surveyObject <- url_data$survey_url summary(surveyObject) str(surveyObject, max.level = 1) surveyObject$content surveyObject$settings surveyObject$downloads surveyObject$summary surveyObject$deployment__links %>% str() surveyObject$permissions %>% str() surveyObject$deployed_versions surveyObject$deployment__links surveyObject$deployment__data_download_links #surveyObject$report_styles  # commented out because quite long but empty surveyObject$report_custom   surveyObject$map_styles  surveyObject$map_custom surveyObject$embeds surveyObject$assignable_permissions"},{"path":"/articles/dev_only/response_overview.html","id":"question","dir":"Articles > Dev_only","previous_headings":"In depth analysis","what":"Question","title":"Overview over different API endpoints","text":"content list shows us information / metadata question: corresponds survey sheet question XLSForm can check comparing XLS downloadable : https://kobo.correlaid.org/api/v2/assets/a7AV5JhRHKf8EWGBJLswwC.xls. start end rows Kobo default always collect metadata start end survey (cf XLSForm documentation)","code":"question_url_data <- url_data$question_url str(question_url_data, max.level = 1) question_url_data$content %>% knitr::kable()"},{"path":"/articles/dev_only/response_overview.html","id":"block","dir":"Articles > Dev_only","previous_headings":"In depth analysis","what":"Block","title":"Overview over different API endpoints","text":"Blocks work similar questions, important information content element. block, can also see translations stored label column choices survey data frame respectively. blocks can belong collection:","code":"block_url_data <- url_data$block_url str(block_url_data, max.level = 1) str(block_url_data$content, max.level = 1) block_url_data$content$survey$label block_url_data$content$choices$label block_url_data$parent block_url_data$ancestors %>% knitr::kable()"},{"path":"/articles/dev_only/response_overview.html","id":"templates","dir":"Articles > Dev_only","previous_headings":"In depth analysis","what":"Templates","title":"Overview over different API endpoints","text":"Templates combinations work similar questions, important information content element. templates can belong collection:","code":"template_url_data <- url_data$template_url str(template_url_data$content, max.level = 1) template_url_data$content$survey %>% knitr::kable() template_url_data$parent"},{"path":"/articles/dev_only/using_crul.html","id":"basic-requests","dir":"Articles > Dev_only","previous_headings":"","what":"Basic requests","title":"Using crul with KoboToolbox","text":"following, demonstration purposes, show access API crul different ways. necessarily one chose package, just want get feeling everything works. Plain request: building client object “hand”, executing methods, parsing results. Wrapping function: avoid code repetition hiding previous steps general function. look “low-hanging” endpoints: assets assets/{{uid}}/data (v2 API ).","code":""},{"path":"/articles/dev_only/using_crul.html","id":"plain-requests","dir":"Articles > Dev_only","previous_headings":"","what":"Plain requests","title":"Using crul with KoboToolbox","text":"example, constructed URL endpoint follows: - base url (kobo.example.com) queried via secret token - additional path (api/v2/assets) query parameter (format=json) passed final url constructed using crul::build_url(). - final url passed -crul::HttpClient instantiation. However, possible (suitable/flexible) pass additional path query parameters actual method call client, shown following example: Remark: Interestingly, seem matter whether one use final passed url, - https:://kobo.example.com/assets/?format=json - https:://kobo.example.com/api/v2/assets/?format=json seems due legacy release Kobo’s v2 API, probably used shorter url form (used).","code":"base_url <- Sys.getenv(\"KBTBR_BASE_URL\") token <- Sys.getenv(\"KBTBR_TOKEN\")  ## Simple GET request  # Build the URL from a named-list style: asset_url <- crul::url_build(   url = base_url,   path = \"api/v2/assets\",   query = list(format = \"json\") )  #' crul also has the reverse operation \"url_parse\" which decomposes an URL into #' its elements this could be useful when \"navigating\" around the API using the #' asset urls provided in the responses, e.g. in case we wanted to add elements #' of it to a data frame representation etc. crul::url_parse(asset_url)  # Get an instance of a crul::HttpClient: crul_client <- crul::HttpClient$new(   url = asset_url,   headers = list(     Authorization = paste0(\"Token \", token)   ) )  crul_resp <- crul_client$get() sloop::otype(crul_resp) crul_resp$raise_for_status() # equivalent of httr::stop_for_status()  # Parse and inspect response parsed_assets <- crul_resp$parse(\"UTF-8\") %>%   jsonlite::fromJSON()  # Inspect the results names(parsed_assets) str(parsed_assets, 1) # Get an instance of a crul HttpClient: crul_client <- crul::HttpClient$new(   url = base_url,   headers = list(     Authorization = paste0(\"Token \", token),     \"content-type\" = \"application/json\"   ) )  # Make a GET request, and pass additional path and query parameters: crul_resp2 <- crul_client$get(   path = \"api/v2/assets\",   query = list(format = \"json\")   )"},{"path":"/articles/dev_only/using_crul.html","id":"post-requests","dir":"Articles > Dev_only","previous_headings":"Plain requests","what":"POST requests","title":"Using crul with KoboToolbox","text":"first example, can try create new asset (without content) via POST request. Note somehow additional nested parameter “settings” resulted failure request. questionable documentation. explain misbehaviour moment. next example, similar style clone existing asset. needs two arguments passed body POST request.","code":"# A little helper function to create a json-like string from # a list. # _note_ Kobotoolbox seems to be unable to deal with arrays, thus we have # to unbox vectors of length 1. list_as_json_char <- function(list) {   jsonlite::toJSON(x = list, pretty = TRUE, auto_unbox = TRUE) %>%     as.character() }   body_create_example <- list_as_json_char(list(   \"name\" = \"A survey object created via API/R\",   \"asset_type\" = \"survey\" ))  # Exectute the request, and use method chaining to parse it directly  crul_client$   post(     path = \"api/v2/assets/\",     body = body_create_example)$   parse(\"utf-8\") example_clone_body <- list_as_json_char(list(   \"clone_from\" = \"ajzghKK6NELaixPQqsm49e\",   \"name\" = \"This is a cloned survey (via API/R)\",   \"asset_type\" = \"survey\" ))  crul_client$   post(     path = \"api/v2/assets/\",     body = example_clone_body)$   parse(\"utf-8\")"},{"path":"/articles/dev_only/using_crul.html","id":"patch-requests","dir":"Articles > Dev_only","previous_headings":"Plain requests","what":"PATCH Requests","title":"Using crul with KoboToolbox","text":"newly created assets type survey initially draft mode. However, can also move deployed? Let’s say want deploy surveys created beforehand, can identify put API/R name (course, nothing package). WORK YET","code":"# First, get again a list of assets df_selected_uids <- crul_client$   get(     path = \"api/v2/assets\",     query = list(formant = \"json\"))$   parse(\"utf-8\") %>%   jsonlite::fromJSON() %>%   purrr::pluck(\"results\") %>%   tibble::as_tibble() %>%   dplyr::filter(stringr::str_detect(name, \"API/R\")) %>%   dplyr::select(name, uid)  df_selected_uids  df_selected_uids$uid %>%   purrr::walk(.f = function(uid) {     crul_client$       patch(         path = glue::glue(\"api/v2/assets/{uid}/deployment/\"),         query = list(active = \"false\")       )   })"},{"path":"/articles/dev_only/using_crul.html","id":"wrapping-it-in-a-function","dir":"Articles > Dev_only","previous_headings":"","what":"Wrapping it in a function","title":"Using crul with KoboToolbox","text":"Just play around possibilities, one can create function consumes HttpClient object performes request , plus additional data parsing / retrieval. Consider complex example, first need retrieve list asset uid s, use second step construct URLs get actually response data survey assets. Note: might mentioned somewhat awkward removing base url query, adding implicit . client case always base url, tell (yet) whether accidentially already prepended supplied path. think using urltools::path() somewhere sure everything stripped away, given path start api/v2… discussed.","code":"# Consider the following example client object example_client <- crul::HttpClient$new(   url = Sys.getenv(\"KBTBR_BASE_URL\"),   headers = list(Authorization = paste0(\"Token \", Sys.getenv(\"KBTBR_TOKEN\"))) )   #' Simple request #'  #' Function that returns the parsed, tibbelized result from a simple GET #' request #' @param client An object of class HttpClient #' @param path <string> #' @param query <list> A named list of strings, giving additional request #'  parameters. #' @return A tibble simple_request <- function(client, path, query = NULL) {    stopifnot(\"HttpClient\" %in% class(client))   r <- client$get(path, query)   r$raise_for_status()   r$parse(\"UTF-8\") %>%     jsonlite::fromJSON() %>%     purrr::pluck(\"results\") %>%     tibble::as_tibble() }  simple_request(example_client, \"api/v2/collections\", list(format = \"json\")) assets_df <- simple_request(example_client, \"api/v2/assets\", list(format = \"json\"))  data_url <- assets_df %>%   dplyr::filter(asset_type == \"survey\") %>%   pull(data) %>%   urltools::path()  full_dta_list <- data_url %>%   purrr::map(function(url) {     tryCatch(       simple_request(example_client, path = url, query = list(format = \"json\")),       error = function(e) {         usethis::ui_warn(\"Failed for {url}: {e}\")         return(NULL)        })})  str(full_dta_list, 1)"},{"path":"/articles/kbtbr.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started","text":"kbtbr wrapper KoBoToolbox APIs. focuses API v2 also makes use v1 required. kbtbr uses R6 classes. means object-oriented user interface might feel unfamiliar R users first. don’t worry - get used quickly!","code":""},{"path":[]},{"path":"/articles/kbtbr.html","id":"authentication","dir":"Articles","previous_headings":"Setup","what":"Authentication","title":"Get started","text":"Get API token using methods described KoBoToolbox documentation. store environment variable opening editing .Renviron: Add token new line follows: Save file restart R/RStudio. course, can also use local environment files method securely store API token.","code":"usethis::edit_r_environ() KBTBR_TOKEN=yourapitokenhere"},{"path":"/articles/kbtbr.html","id":"base-url","dir":"Articles","previous_headings":"Setup","what":"Base URL","title":"Get started","text":"order use kbtbr, need know base URLs KoBoToolbox server (cf. ). two base URLs, one API version 2 one version 1. use kbtbr package, need specify base URL version 2. However, certain functionalities rely version 1 API require base URL. using one two hosted instances, base URLs:","code":""},{"path":"/articles/kbtbr.html","id":"creating-the-kobo-instance","dir":"Articles","previous_headings":"Setup","what":"Creating the Kobo instance","title":"Get started","text":"right base URL(s), can create instance Kobo class. base_url_v1 argument optional. alternative ways initializing Kobo class, see .","code":"library(kbtbr) library(dplyr) base_url_v2 <- \"https://kobo.correlaid.org\" # replace with your base URL for v2 base_url_v1  <- \"https://kc.correlaid.org\" # replace with your base URL for v1  token <- Sys.getenv(\"KBTBR_TOKEN\")  kobo <- Kobo$new(base_url_v2, base_url_v1, token) kobo ## <Kobo> ##   Public: ##     clone: function (deep = FALSE)  ##     clone_asset: function (clone_from, new_name, asset_type)  ##     create_asset: function (name, asset_type, description = \"\", sector = list(label = \"\",  ##     deploy_asset: function (uid)  ##     get: function (path, query = list(), version = \"v2\", format = \"json\",  ##     get_asset: function (id)  ##     get_assets: function ()  ##     get_submissions: function (id)  ##     get_surveys: function (show_all_cols = FALSE)  ##     import_xls_form: function (name, file_path)  ##     initialize: function (base_url_v2 = NULL, base_url_v1 = NULL, kobo_token = Sys.getenv(\"KBTBR_TOKEN\"),  ##     post: function (path, body, version = \"v2\")  ##     session_v1: KoboClient, HttpClient, R6 ##     session_v2: KoboClient, HttpClient, R6"},{"path":"/articles/kbtbr.html","id":"working-with-the-kobo-class","dir":"Articles","previous_headings":"","what":"Working with the Kobo class","title":"Get started","text":"good first step get overview assets. Almost everything KoBoToolbox asset: questions, blocks, forms, templates. can also just get forms/surveys: Inspect data manually: can extract ID single survey filtering name. Get answers (submissions KoBoToolbox API lingo) form/survey: Check Data wrangling responses see handle messy column names.","code":"assets <- kobo$get_assets() table(assets$asset_type) ##  ##    block question   survey template  ##        9        4       45        7 surveys <- kobo$get_surveys() head(surveys) ## # A tibble: 6 × 9 ##   name    uid   date_created date_modified owner__username parent has_deployment ##   <chr>   <chr> <chr>        <chr>         <chr>           <chr>  <lgl>          ## 1 Test s… a27V… 2022-01-24T… 2022-01-24T1… api_user        NA     TRUE           ## 2 Test s… aCZ7… 2022-01-24T… 2022-01-24T1… api_user        NA     TRUE           ## 3 Test s… aXDf… 2022-01-24T… 2022-01-24T1… api_user        NA     FALSE          ## 4 Test s… apwD… 2022-01-24T… 2022-01-24T1… api_user        NA     FALSE          ## 5 clonin… aXLR… 2022-01-24T… 2022-01-24T1… api_user        NA     FALSE          ## 6 kbtbr … aRo4… 2021-05-02T… 2021-09-24T1… api_user        NA     TRUE           ## # … with 2 more variables: deployment__active <lgl>, ## #   deployment__submission_count <int> test_id <- surveys %>% filter(name == \"kbtbr Testing Survey\") %>% pull(uid) submissions <- kobo$get_submissions(test_id) str(submissions) ## tibble [8 × 35] (S3: tbl_df/tbl/data.frame) ##  $ _id                                               : int [1:8] 482 484 485 486 487 532 647 659 ##  $ control_over_life                                 : chr [1:8] \"7\" \"3\" \"3\" \"3\" ... ##  $ Taking_all_things_to_ould_you_say_you_are         : chr [1:8] \"1\" \"3\" \"8\" \"3\" ... ##  $ voluntary_activity                                : chr [1:8] \"8\" \"8\" \"8\" \"2\" ... ##  $ trust_in_groups/Your_family                       : chr [1:8] \"1\" \"2\" \"1\" \"2\" ... ##  $ formhub/uuid                                      : chr [1:8] \"1f37921296654b91b8cc11e152956764\" \"1f37921296654b91b8cc11e152956764\" \"1f37921296654b91b8cc11e152956764\" \"1f37921296654b91b8cc11e152956764\" ... ##  $ _validation_status                                :'data.frame':  8 obs. of  0 variables ##  $ importance_in_life/Politics                       : chr [1:8] \"1\" \"3\" \"2\" \"3\" ... ##  $ _uuid                                             : chr [1:8] \"199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"199a3066-72a2-48b0-ade1-c186ae6cb0e7\" ... ##  $ health_self_assessment                            : chr [1:8] \"5\" \"3\" \"3\" \"5\" ... ##  $ importance_in_life/Friends_and_acquaintances      : chr [1:8] \"1\" \"2\" \"2\" \"3\" ... ##  $ _tags                                             :List of 8 ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##  $ trust_in_groups/People_you_know_personally        : chr [1:8] \"2\" \"2\" \"2\" \"3\" ... ##  $ _submitted_by                                     : logi [1:8] NA NA NA NA NA NA ... ##  $ _xform_id_string                                  : chr [1:8] \"aRo4wg5utWT7dwdnQQEAE7\" \"aRo4wg5utWT7dwdnQQEAE7\" \"aRo4wg5utWT7dwdnQQEAE7\" \"aRo4wg5utWT7dwdnQQEAE7\" ... ##  $ importance_in_life/Family                         : chr [1:8] \"2\" \"3\" \"1\" \"2\" ... ##  $ trust_in_groups/People_you_meet_for_the_first_time: chr [1:8] \"3\" \"2\" \"2\" \"3\" ... ##  $ meta/instanceID                                   : chr [1:8] \"uuid:199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"uuid:199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"uuid:199a3066-72a2-48b0-ade1-c186ae6cb0e7\" \"uuid:199a3066-72a2-48b0-ade1-c186ae6cb0e7\" ... ##  $ trust_in_groups/People_of_another_nationality     : chr [1:8] \"2\" \"3\" \"3\" \"2\" ... ##  $ trust_in_groups/People_in_your_neighborhood       : chr [1:8] \"3\" \"1\" \"2\" \"2\" ... ##  $ importance_in_life/Religion                       : chr [1:8] \"1\" \"3\" \"3\" \"2\" ... ##  $ end                                               : chr [1:8] \"2021-09-01T21:38:34.035+02:00\" \"2021-09-01T21:52:25.333+02:00\" \"2021-09-01T21:53:05.707+02:00\" \"2021-09-01T21:53:39.141+02:00\" ... ##  $ locate_hamburg                                    : chr [1:8] \"60.924739 -90.682977 0 0\" \"34.461879 -126.200905 0 0\" \"48.52047 70.320327 0 0\" \"64.520727 52.758186 0 0\" ... ##  $ _submission_time                                  : chr [1:8] \"2021-09-01T19:38:34\" \"2021-09-01T19:52:25\" \"2021-09-01T19:53:05\" \"2021-09-01T19:53:39\" ... ##  $ _notes                                            :List of 8 ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##   ..$ : list() ##  $ _attachments                                      :List of 8 ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 1 obs. of  9 variables: ##   .. ..$ mimetype           : chr \"image/png\" ##   .. ..$ download_small_url : chr \"https://kc.correlaid.org/media/small?media_file=api_user%2Fattachments%2F1f37921296654b91b8cc11e152956764%2F40c\"| __truncated__ ##   .. ..$ download_large_url : chr \"https://kc.correlaid.org/media/large?media_file=api_user%2Fattachments%2F1f37921296654b91b8cc11e152956764%2F40c\"| __truncated__ ##   .. ..$ download_url       : chr \"https://kc.correlaid.org/media/original?media_file=api_user%2Fattachments%2F1f37921296654b91b8cc11e152956764%2F\"| __truncated__ ##   .. ..$ filename           : chr \"api_user/attachments/1f37921296654b91b8cc11e152956764/40c70c77-7d3d-4824-8e0e-43094764a75d/Screenshot 2021-09-0\"| __truncated__ ##   .. ..$ instance           : int 532 ##   .. ..$ download_medium_url: chr \"https://kc.correlaid.org/media/medium?media_file=api_user%2Fattachments%2F1f37921296654b91b8cc11e152956764%2F40\"| __truncated__ ##   .. ..$ id                 : int 3 ##   .. ..$ xform              : int 18 ##   ..$ :'data.frame': 0 obs. of  0 variables ##   ..$ :'data.frame': 0 obs. of  0 variables ##  $ importance_in_life/Leisure_time                   : chr [1:8] \"1\" \"2\" \"2\" \"3\" ... ##  $ start                                             : chr [1:8] \"2021-09-01T21:36:49.742+02:00\" \"2021-09-01T21:36:49.742+02:00\" \"2021-09-01T21:36:49.742+02:00\" \"2021-09-01T21:36:49.742+02:00\" ... ##  $ trust_in_groups/People_of_another_religion        : chr [1:8] \"2\" \"3\" \"3\" NA ... ##  $ _geolocation                                      :List of 8 ##   ..$ : num [1:2] 60.9 -90.7 ##   ..$ : num [1:2] 34.5 -126.2 ##   ..$ : num [1:2] 48.5 70.3 ##   ..$ : num [1:2] 64.5 52.8 ##   ..$ : num [1:2] 62.3 43 ##   ..$ : num [1:2] 53.5 10 ##   ..$ : num [1:2] -6.5 85 ##   ..$ : num [1:2] 53.1 11.1 ##  $ importance_in_life/Work                           : chr [1:8] \"1\" \"2\" \"1\" \"2\" ... ##  $ _status                                           : chr [1:8] \"submitted_via_web\" \"submitted_via_web\" \"submitted_via_web\" \"submitted_via_web\" ... ##  $ __version__                                       : chr [1:8] \"vkhZEtuEwyhNgJropgVs7h\" \"vkhZEtuEwyhNgJropgVs7h\" \"vkhZEtuEwyhNgJropgVs7h\" \"vkhZEtuEwyhNgJropgVs7h\" ... ##  $ trust_in_others                                   : chr [1:8] \"2\" \"2\" \"2\" \"2\" ... ##  $ file_upload                                       : chr [1:8] NA NA NA NA ..."},{"path":"/articles/kbtbr.html","id":"kobo-administration-with-kbtbr","dir":"Articles","previous_headings":"","what":"Kobo Administration with kbtbr","title":"Get started","text":"kbtbr, can also manage assets useful administration tasks right R console.","code":""},{"path":"/articles/kbtbr.html","id":"create-an-asset","dir":"Articles","previous_headings":"Kobo Administration with kbtbr","what":"Create an Asset","title":"Get started","text":"can also create assets using create_asset() method Kobo class. can useful need create lot assets .","code":"res <- kobo$create_asset(\"Question block\",                    asset_type = \"block\",                    description = \"this question block was created with the API.\") res$status_http() ## <Status code: 201> ##   Message: Created ##   Explanation: Document created, URL follows response_content <- res$parse(\"UTF-8\") %>% jsonlite::fromJSON() str(response_content, max.level = 1) ## List of 39 ##  $ url                            : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/\" ##  $ owner                          : chr \"https://kobo.correlaid.org/api/v2/users/api_user/\" ##  $ owner__username                : chr \"api_user\" ##  $ parent                         : NULL ##  $ ancestors                      : NULL ##  $ settings                       :List of 4 ##  $ asset_type                     : chr \"block\" ##  $ date_created                   : chr \"2022-01-24T13:24:29.331033Z\" ##  $ summary                        : Named list() ##  $ date_modified                  : chr \"2022-01-24T13:24:29.331054Z\" ##  $ version_id                     : chr \"vZpxcU8qvJ9N6wHSiPsSpv\" ##  $ version__content_hash          : chr \"4724ddb07034559d7fb5a3d18288dfb683a2d082\" ##  $ version_count                  : int 1 ##  $ has_deployment                 : logi FALSE ##  $ deployed_version_id            : NULL ##  $ deployed_versions              :List of 4 ##  $ deployment__identifier         : NULL ##  $ deployment__links              : Named list() ##  $ deployment__active             : logi FALSE ##  $ deployment__data_download_links: Named list() ##  $ deployment__submission_count   : int 0 ##  $ report_styles                  :List of 3 ##  $ report_custom                  : Named list() ##  $ map_styles                     : Named list() ##  $ map_custom                     : Named list() ##  $ content                        :List of 3 ##  $ downloads                      :'data.frame': 2 obs. of  2 variables: ##  $ embeds                         :'data.frame': 2 obs. of  2 variables: ##  $ koboform_link                  : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/koboform/\" ##  $ xform_link                     : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/xform/\" ##  $ hooks_link                     : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/hooks/\" ##  $ tag_string                     : chr \"\" ##  $ uid                            : chr \"avJyi8RUCjQ4RSFA7qdWPG\" ##  $ kind                           : chr \"asset\" ##  $ xls_link                       : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/xls/\" ##  $ name                           : chr \"Question block\" ##  $ assignable_permissions         :'data.frame': 3 obs. of  2 variables: ##  $ permissions                    :'data.frame': 3 obs. of  4 variables: ##  $ data                           : chr \"https://kobo.correlaid.org/api/v2/assets/avJyi8RUCjQ4RSFA7qdWPG/data/\""},{"path":"/articles/kbtbr.html","id":"cloning-an-asset","dir":"Articles","previous_headings":"Kobo Administration with kbtbr","what":"Cloning an Asset","title":"Get started","text":"order clone asset, just specify ID, new name cloned asset type. Parse ID asset created:","code":"res <- kobo$clone_asset(test_id, \"Test survey copy\", \"survey\") class(res) ## [1] \"HttpResponse\" \"R6\" res$status_http() ## <Status code: 201> ##   Message: Created ##   Explanation: Document created, URL follows response_content <- res$parse(\"UTF-8\") %>% jsonlite::fromJSON() str(response_content, max.level = 1) ## List of 39 ##  $ url                            : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/\" ##  $ owner                          : chr \"https://kobo.correlaid.org/api/v2/users/api_user/\" ##  $ owner__username                : chr \"api_user\" ##  $ parent                         : NULL ##  $ ancestors                      : NULL ##  $ settings                       :List of 3 ##  $ asset_type                     : chr \"survey\" ##  $ date_created                   : chr \"2022-01-24T13:04:49.219153Z\" ##  $ summary                        :List of 6 ##  $ date_modified                  : chr \"2022-01-24T13:04:49.219192Z\" ##  $ version_id                     : chr \"vfAaB99KXQeGf2gMxWA57z\" ##  $ version__content_hash          : chr \"f3e28cf31d58b03c955935dedec741d31d4537b8\" ##  $ version_count                  : int 1 ##  $ has_deployment                 : logi FALSE ##  $ deployed_version_id            : NULL ##  $ deployed_versions              :List of 4 ##  $ deployment__identifier         : NULL ##  $ deployment__links              : Named list() ##  $ deployment__active             : logi FALSE ##  $ deployment__data_download_links: Named list() ##  $ deployment__submission_count   : int 0 ##  $ report_styles                  :List of 3 ##  $ report_custom                  : Named list() ##  $ map_styles                     : Named list() ##  $ map_custom                     : Named list() ##  $ content                        :List of 6 ##  $ downloads                      :'data.frame': 2 obs. of  2 variables: ##  $ embeds                         :'data.frame': 2 obs. of  2 variables: ##  $ koboform_link                  : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/koboform/\" ##  $ xform_link                     : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/xform/\" ##  $ hooks_link                     : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/hooks/\" ##  $ tag_string                     : chr \"\" ##  $ uid                            : chr \"ackE4RGzXMjWBei3bRHPbb\" ##  $ kind                           : chr \"asset\" ##  $ xls_link                       : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/xls/\" ##  $ name                           : chr \"Test survey copy\" ##  $ assignable_permissions         :'data.frame': 9 obs. of  2 variables: ##  $ permissions                    :'data.frame': 8 obs. of  4 variables: ##  $ data                           : chr \"https://kobo.correlaid.org/api/v2/assets/ackE4RGzXMjWBei3bRHPbb/data/\" test_clone_id <- response_content$uid"},{"path":"/articles/kbtbr.html","id":"deploying-an-asset","dir":"Articles","previous_headings":"Kobo Administration with kbtbr","what":"Deploying an asset","title":"Get started","text":"deploy existing asset, e.g. cloning updating:","code":"res <- kobo$deploy_asset(test_clone_id) class(res) ## [1] \"HttpResponse\" \"R6\" res$status_http() ## <Status code: 200> ##   Message: OK ##   Explanation: Request fulfilled, document follows response_content <- res$parse(\"UTF-8\") %>% jsonlite::fromJSON() str(response_content, max.level = 1) ## List of 5 ##  $ backend   : chr \"kobocat\" ##  $ identifier: chr \"https://kc.correlaid.org/api_user/forms/ackE4RGzXMjWBei3bRHPbb\" ##  $ active    : logi TRUE ##  $ version_id: chr \"vfAaB99KXQeGf2gMxWA57z\" ##  $ asset     :List of 37"},{"path":"/articles/kbtbr.html","id":"importing-xls-forms","dir":"Articles","previous_headings":"Kobo Administration with kbtbr","what":"Importing XLS forms","title":"Get started","text":"can import XLS form. create draft survey/form deploy using kobo$deploy_asset().","code":"res <- kobo$import_xls_form(name = \"XLS Form via import\", \"assets/xls_form_downloaded.xls\") res$status_http() ## <Status code: 201> ##   Message: Created ##   Explanation: Document created, URL follows"},{"path":"/articles/kbtbr.html","id":"making-it-your-own-post-and-get","dir":"Articles","previous_headings":"","what":"Making it your own: post and get","title":"Get started","text":"kbtbr means complete. might find use cases covered existing methods Kobo class. purpose, Kobo well lower-level KoboClient class expose generic get post functions allow implement functionalities . can check existing high-level functions (e.g. get_assets clone_asset) get ideas code look like. course, contributions kbtbr always welcome.","code":""},{"path":[]},{"path":"/articles/koboclient-class.html","id":"initialization","dir":"Articles","previous_headings":"Getting started","what":"Initialization","title":"Advanced: The KoboClient class","text":"start session, one needs know URL KoboToolbox server API token, unique key allows interaction Kobo server. can get API key account settings. One possibility store token environment variable. KoboClient check variable KBTBR_TOKEN set initialization. Otherwise, one can pass token initialization function. first step start session create object R6 class calling $new method.","code":"library(kbtbr) base_url <- \"https://kobo.correlaid.org\" my_session <- KoboClient$new(base_url, kobo_token = \"faketoken\") class(my_session) #> [1] \"KoboClient\" \"HttpClient\" \"R6\""},{"path":"/articles/koboclient-class.html","id":"the-power-of-inheritance","dir":"Articles","previous_headings":"Getting started","what":"The power of inheritance","title":"Advanced: The KoboClient class","text":"Thanks inheritance mechanism, my_session can provide features crul::HttpClient parent R6 class. example, show several properties set HTTP client, like headers, URL properties. $print() method implemented KoboClient class, automatically inherited parent class. KoboClient called child crul::HttpClient, parent, inheritance mechanism can features (methods fields) parent, can also provide features specialize parent methods. case, example, features added work effectively KoboToolbox API: stores API token private variable, method specialized like $get method described next section.","code":"my_session$print() #> <crul connection>  #>   url: https://kobo.correlaid.org #>   curl options:  #>   proxies:  #>   auth:  #>   headers:  #>     Authorization: Token faketoken #>     Accept: application/json #>   progress: FALSE #>   hooks:"},{"path":"/articles/koboclient-class.html","id":"get-method","dir":"Articles","previous_headings":"Getting started","what":"get Method","title":"Advanced: The KoboClient class","text":"get method based method $get() parent class. Hence, get method query APIs return R6 object class crul::HttpResponse.","code":"assets <- my_session$get(path = \"api/v2/assets/\") str(assets, max.level = 1) #> Classes 'HttpResponse', 'R6' <HttpResponse> #>   Public: #>     clone: function (deep = FALSE)  #>     content: 7b 22 63 6f 75 6e 74 22 3a 36 35 2c 22 6e 65 78 74 22 3a ... #>     handle: NULL #>     initialize: function (method, url, opts, handle, status_code, request_headers,  #>     method: get #>     modified: NA #>     opts: NULL #>     parse: function (encoding = NULL, ...)  #>     print: function (x, ...)  #>     raise_for_ct: function (type, charset = NULL, behavior = \"stop\")  #>     raise_for_ct_html: function (charset = NULL, behavior = \"stop\")  #>     raise_for_ct_json: function (charset = NULL, behavior = \"stop\")  #>     raise_for_ct_xml: function (charset = NULL, behavior = \"stop\")  #>     raise_for_status: function ()  #>     request: RequestSignature, R6 #>     request_headers: list #>     response_headers: list #>     response_headers_all: list #>     status_code: 200 #>     status_http: function (verbose = FALSE)  #>     success: function ()  #>     times: NULL #>     url: https://kobo.correlaid.org/api/v2/assets/?format=json #>   Private: #>     raise_for_ct_factory: function (type)  #>     raise_for_ct_user: function ()"},{"path":"/articles/koboclient-class.html","id":"the-use-of-koboclient-in-the-kobo-class","dir":"Articles","previous_headings":"","what":"The use of KoboClient in the Kobo class","title":"Advanced: The KoboClient class","text":"Kobo class uses KoboClient HTTP requests. Kobo can create session initializing KoboClient instance based base_url_v2. probably easiest way initialize Kobo instance. Alternatively, user can pass session - KoboClient instance associated API base URL - via session_v2 argument Kobo$new(). Kobo instance use session communication servers. user specifies base_url_v1 argument Kobo$new() make use functionality based KoBoToolbox API v1, initializer Kobo initialize second KoboClient instance communicate v1 version API. Kobo instance two sessions, one v2 one v1.","code":"kobo <- Kobo$new(base_url) # passing a KoboClient instance / a session to Kobo my_session <- KoboClient$new(base_url) kobo <- Kobo$new(session_v2 = my_session) # specifying session for API v2 directly, but letting Kobo initialize the one for API v1 kobo <- Kobo$new(session_v2 = my_session, base_url_v1 = \"kc.correlaid.org\") kobo #> <Kobo> #>   Public: #>     clone: function (deep = FALSE)  #>     clone_asset: function (clone_from, new_name, asset_type)  #>     create_asset: function (name, asset_type, description = \"\", sector = list(label = \"\",  #>     deploy_asset: function (uid)  #>     get: function (path, query = list(), version = \"v2\", format = \"json\",  #>     get_asset: function (id)  #>     get_assets: function ()  #>     get_submissions: function (id)  #>     get_surveys: function (show_all_cols = FALSE)  #>     import_xls_form: function (name, file_path)  #>     initialize: function (base_url_v2 = NULL, base_url_v1 = NULL, kobo_token = Sys.getenv(\"KBTBR_TOKEN\"),  #>     post: function (path, body, version = \"v2\")  #>     session_v1: KoboClient, HttpClient, R6 #>     session_v2: KoboClient, HttpClient, R6 assets <- kobo$get_assets() colnames(assets) #>  [1] \"url\"                          \"date_modified\"                #>  [3] \"date_created\"                 \"owner\"                        #>  [5] \"summary\"                      \"owner__username\"              #>  [7] \"parent\"                       \"uid\"                          #>  [9] \"tag_string\"                   \"settings\"                     #> [11] \"kind\"                         \"name\"                         #> [13] \"asset_type\"                   \"version_id\"                   #> [15] \"has_deployment\"               \"deployed_version_id\"          #> [17] \"deployment__identifier\"       \"deployment__active\"           #> [19] \"deployment__submission_count\" \"permissions\"                  #> [21] \"downloads\"                    \"data\""},{"path":"/articles/wrangling-survey-responses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data wrangling of responses","text":"article demonstrates techniques cleaning wrangling data returned get_submissions method Kobo Asset classes. vignette broken different question types. general, users make heavy use question options give custom column names labels answer options. result better behaving column names make data cleaning easier. Let’s look column names: form contains questions several available types KoBoToolbox. whole list available types can found . information also xlsform page. test form includes: select one: Taking_all_things_to_ould_you_say_you_are (example bad question label!), health_self_assessment, voluntary_activity, trust_in_others rating: trust_in_groups/{category}, trust_in_groups/{importance_in_life} range: control_over_life point (location): locate_hamburg file upload: file_upload rest columns metadata automatically added KoboToolbox. start _.","code":"library(kbtbr) library(tidyr) library(stringr) library(dplyr) BASE_URL <- \"https://kobo.correlaid.org\" kobo <-   Kobo$new(base_url_v2 = BASE_URL,            kobo_token = Sys.getenv(\"KBTBR_TOKEN\")) asset_id <- \"aRo4wg5utWT7dwdnQQEAE7\" submissions_df <- kobo$get_submissions(asset_id) colnames(submissions_df) #>  [1] \"_id\"                                                #>  [2] \"control_over_life\"                                  #>  [3] \"Taking_all_things_to_ould_you_say_you_are\"          #>  [4] \"voluntary_activity\"                                 #>  [5] \"trust_in_groups/Your_family\"                        #>  [6] \"formhub/uuid\"                                       #>  [7] \"_validation_status\"                                 #>  [8] \"importance_in_life/Politics\"                        #>  [9] \"_uuid\"                                              #> [10] \"health_self_assessment\"                             #> [11] \"importance_in_life/Friends_and_acquaintances\"       #> [12] \"_tags\"                                              #> [13] \"trust_in_groups/People_you_know_personally\"         #> [14] \"_submitted_by\"                                      #> [15] \"_xform_id_string\"                                   #> [16] \"importance_in_life/Family\"                          #> [17] \"trust_in_groups/People_you_meet_for_the_first_time\" #> [18] \"meta/instanceID\"                                    #> [19] \"trust_in_groups/People_of_another_nationality\"      #> [20] \"trust_in_groups/People_in_your_neighborhood\"        #> [21] \"importance_in_life/Religion\"                        #> [22] \"end\"                                                #> [23] \"locate_hamburg\"                                     #> [24] \"_submission_time\"                                   #> [25] \"_notes\"                                             #> [26] \"_attachments\"                                       #> [27] \"importance_in_life/Leisure_time\"                    #> [28] \"start\"                                              #> [29] \"trust_in_groups/People_of_another_religion\"         #> [30] \"_geolocation\"                                       #> [31] \"importance_in_life/Work\"                            #> [32] \"_status\"                                            #> [33] \"__version__\"                                        #> [34] \"trust_in_others\"                                    #> [35] \"file_upload\""},{"path":[]},{"path":"/articles/wrangling-survey-responses.html","id":"sorting","dir":"Articles","previous_headings":"Column names","what":"Sorting","title":"Data wrangling of responses","text":"seen , API provide meaningful sorting columns. initial reordering least put metadata columns front: large forms, might useful investigate sort columns alphabetically order appeared form. small form , can still individually select columns put meaningful order:","code":"library(dplyr) submissions_df <- submissions_df %>%   select(starts_with(\"_\"), start, end, everything()) colnames(submissions_df) #>  [1] \"_id\"                                                #>  [2] \"_validation_status\"                                 #>  [3] \"_uuid\"                                              #>  [4] \"_tags\"                                              #>  [5] \"_submitted_by\"                                      #>  [6] \"_xform_id_string\"                                   #>  [7] \"_submission_time\"                                   #>  [8] \"_notes\"                                             #>  [9] \"_attachments\"                                       #> [10] \"_geolocation\"                                       #> [11] \"_status\"                                            #> [12] \"__version__\"                                        #> [13] \"start\"                                              #> [14] \"end\"                                                #> [15] \"control_over_life\"                                  #> [16] \"Taking_all_things_to_ould_you_say_you_are\"          #> [17] \"voluntary_activity\"                                 #> [18] \"trust_in_groups/Your_family\"                        #> [19] \"formhub/uuid\"                                       #> [20] \"importance_in_life/Politics\"                        #> [21] \"health_self_assessment\"                             #> [22] \"importance_in_life/Friends_and_acquaintances\"       #> [23] \"trust_in_groups/People_you_know_personally\"         #> [24] \"importance_in_life/Family\"                          #> [25] \"trust_in_groups/People_you_meet_for_the_first_time\" #> [26] \"meta/instanceID\"                                    #> [27] \"trust_in_groups/People_of_another_nationality\"      #> [28] \"trust_in_groups/People_in_your_neighborhood\"        #> [29] \"importance_in_life/Religion\"                        #> [30] \"locate_hamburg\"                                     #> [31] \"importance_in_life/Leisure_time\"                    #> [32] \"trust_in_groups/People_of_another_religion\"         #> [33] \"importance_in_life/Work\"                            #> [34] \"trust_in_others\"                                    #> [35] \"file_upload\" submissions_df <- submissions_df %>%   select(     starts_with(\"_\"),     start,     end,     Taking_all_things_to_ould_you_say_you_are,     starts_with(\"importance_in_life\"),     trust_in_others,     starts_with(\"trust_in_groups\"),     control_over_life,     voluntary_activity,     locate_hamburg,     health_self_assessment,     file_upload   )"},{"path":"/articles/wrangling-survey-responses.html","id":"cleaning-column-names","dir":"Articles","previous_headings":"Column names","what":"Cleaning column names","title":"Data wrangling of responses","text":"Fortunately, KoBoToolbox API already quite sensible column names, snakecase (.e. \"_\" separator) default. Column names determined question name thus configurable via xlsform KoboToolbox interface (question settings -> “Data column name”). Typically, good idea immediately clean column names function like janitor::clean_names. However, might disadvantageous wrangling rating type questions question name category name conveniently separated “/” questions. Hence, can clean meta data column names, removing \"_\" beginning: Alternatively, can exclude rating questions clean names: purposes rest article, choose second version:","code":"library(janitor) renamed_meta <- submissions_df %>%   rename_with(make_clean_names, starts_with(\"_\")) library(janitor) renamed_except_rating <- submissions_df %>%   rename_with(make_clean_names,-starts_with(c(\"importance_in_life\", \"trust_in_groups\"))) colnames(renamed_except_rating) #>  [1] \"id\"                                                 #>  [2] \"validation_status\"                                  #>  [3] \"uuid\"                                               #>  [4] \"tags\"                                               #>  [5] \"submitted_by\"                                       #>  [6] \"xform_id_string\"                                    #>  [7] \"submission_time\"                                    #>  [8] \"notes\"                                              #>  [9] \"attachments\"                                        #> [10] \"geolocation\"                                        #> [11] \"status\"                                             #> [12] \"version\"                                            #> [13] \"start\"                                              #> [14] \"end\"                                                #> [15] \"taking_all_things_to_ould_you_say_you_are\"          #> [16] \"importance_in_life/Politics\"                        #> [17] \"importance_in_life/Friends_and_acquaintances\"       #> [18] \"importance_in_life/Family\"                          #> [19] \"importance_in_life/Religion\"                        #> [20] \"importance_in_life/Leisure_time\"                    #> [21] \"importance_in_life/Work\"                            #> [22] \"trust_in_others\"                                    #> [23] \"trust_in_groups/Your_family\"                        #> [24] \"trust_in_groups/People_you_know_personally\"         #> [25] \"trust_in_groups/People_you_meet_for_the_first_time\" #> [26] \"trust_in_groups/People_of_another_nationality\"      #> [27] \"trust_in_groups/People_in_your_neighborhood\"        #> [28] \"trust_in_groups/People_of_another_religion\"         #> [29] \"control_over_life\"                                  #> [30] \"voluntary_activity\"                                 #> [31] \"locate_hamburg\"                                     #> [32] \"health_self_assessment\"                             #> [33] \"file_upload\" submissions_df <- renamed_except_rating"},{"path":[]},{"path":"/articles/wrangling-survey-responses.html","id":"type-conversion","dir":"Articles","previous_headings":"Data cleaning","what":"Type conversion","title":"Data wrangling of responses","text":"general, KoBoToolbox API return data character vectors. Hence, conversion necessary applicable. convert multiple columns , can use dplyr::across combination tidyselect helpers: check columns need converting:","code":"glimpse(submissions_df) #> Rows: 8 #> Columns: 33 #> $ id                                                   <int> 482, 484, 485, 48… #> $ validation_status                                    <named list> <NULL>, <N… #> $ uuid                                                 <chr> \"199a3066-72a2-48… #> $ tags                                                 <list> [], [], [], [], … #> $ submitted_by                                         <lgl> NA, NA, NA, NA, N… #> $ xform_id_string                                      <chr> \"aRo4wg5utWT7dwdn… #> $ submission_time                                      <chr> \"2021-09-01T19:38… #> $ notes                                                <list> [], [], [], [], … #> $ attachments                                          <list> [<data.frame[0 x… #> $ geolocation                                          <list> <60.92474, -90.6… #> $ status                                               <chr> \"submitted_via_we… #> $ version                                              <chr> \"vkhZEtuEwyhNgJro… #> $ start                                                <chr> \"2021-09-01T21:36… #> $ end                                                  <chr> \"2021-09-01T21:38… #> $ taking_all_things_to_ould_you_say_you_are            <chr> \"1\", \"3\", \"8\", \"3… #> $ `importance_in_life/Politics`                        <chr> \"1\", \"3\", \"2\", \"3… #> $ `importance_in_life/Friends_and_acquaintances`       <chr> \"1\", \"2\", \"2\", \"3… #> $ `importance_in_life/Family`                          <chr> \"2\", \"3\", \"1\", \"2… #> $ `importance_in_life/Religion`                        <chr> \"1\", \"3\", \"3\", \"2… #> $ `importance_in_life/Leisure_time`                    <chr> \"1\", \"2\", \"2\", \"3… #> $ `importance_in_life/Work`                            <chr> \"1\", \"2\", \"1\", \"2… #> $ trust_in_others                                      <chr> \"2\", \"2\", \"2\", \"2… #> $ `trust_in_groups/Your_family`                        <chr> \"1\", \"2\", \"1\", \"2… #> $ `trust_in_groups/People_you_know_personally`         <chr> \"2\", \"2\", \"2\", \"3… #> $ `trust_in_groups/People_you_meet_for_the_first_time` <chr> \"3\", \"2\", \"2\", \"3… #> $ `trust_in_groups/People_of_another_nationality`      <chr> \"2\", \"3\", \"3\", \"2… #> $ `trust_in_groups/People_in_your_neighborhood`        <chr> \"3\", \"1\", \"2\", \"2… #> $ `trust_in_groups/People_of_another_religion`         <chr> \"2\", \"3\", \"3\", NA… #> $ control_over_life                                    <chr> \"7\", \"3\", \"3\", \"3… #> $ voluntary_activity                                   <chr> \"8\", \"8\", \"8\", \"2… #> $ locate_hamburg                                       <chr> \"60.924739 -90.68… #> $ health_self_assessment                               <chr> \"5\", \"3\", \"3\", \"5… #> $ file_upload                                          <chr> NA, NA, NA, NA, \"… submissions_df <- submissions_df %>%   mutate(across(c(starts_with(     c(\"importance_in_life\", \"trust_in_groups\")   ),   any_of(     c(       \"voluntary_activity\",       \"control_over_life\",       \"health_self_assessment\",       \"trust_in_others\",       \"Taking_all_things_to_ould_you_say_you_are\"     )   )), as.integer)) glimpse(submissions_df) #> Rows: 8 #> Columns: 33 #> $ id                                                   <int> 482, 484, 485, 48… #> $ validation_status                                    <named list> <NULL>, <N… #> $ uuid                                                 <chr> \"199a3066-72a2-48… #> $ tags                                                 <list> [], [], [], [], … #> $ submitted_by                                         <lgl> NA, NA, NA, NA, N… #> $ xform_id_string                                      <chr> \"aRo4wg5utWT7dwdn… #> $ submission_time                                      <chr> \"2021-09-01T19:38… #> $ notes                                                <list> [], [], [], [], … #> $ attachments                                          <list> [<data.frame[0 x… #> $ geolocation                                          <list> <60.92474, -90.6… #> $ status                                               <chr> \"submitted_via_we… #> $ version                                              <chr> \"vkhZEtuEwyhNgJro… #> $ start                                                <chr> \"2021-09-01T21:36… #> $ end                                                  <chr> \"2021-09-01T21:38… #> $ taking_all_things_to_ould_you_say_you_are            <chr> \"1\", \"3\", \"8\", \"3… #> $ `importance_in_life/Politics`                        <int> 1, 3, 2, 3, 3, 3,… #> $ `importance_in_life/Friends_and_acquaintances`       <int> 1, 2, 2, 3, 2, 1,… #> $ `importance_in_life/Family`                          <int> 2, 3, 1, 2, 3, 2,… #> $ `importance_in_life/Religion`                        <int> 1, 3, 3, 2, 3, 3,… #> $ `importance_in_life/Leisure_time`                    <int> 1, 2, 2, 3, 3, 2,… #> $ `importance_in_life/Work`                            <int> 1, 2, 1, 2, 1, 1,… #> $ trust_in_others                                      <int> 2, 2, 2, 2, 1, 1,… #> $ `trust_in_groups/Your_family`                        <int> 1, 2, 1, 2, 2, 3,… #> $ `trust_in_groups/People_you_know_personally`         <int> 2, 2, 2, 3, 2, 2,… #> $ `trust_in_groups/People_you_meet_for_the_first_time` <int> 3, 2, 2, 3, 2, 3,… #> $ `trust_in_groups/People_of_another_nationality`      <int> 2, 3, 3, 2, 1, 3,… #> $ `trust_in_groups/People_in_your_neighborhood`        <int> 3, 1, 2, 2, 2, 2,… #> $ `trust_in_groups/People_of_another_religion`         <int> 2, 3, 3, NA, 2, 3… #> $ control_over_life                                    <int> 7, 3, 3, 3, 3, 5,… #> $ voluntary_activity                                   <int> 8, 8, 8, 2, 8, 8,… #> $ locate_hamburg                                       <chr> \"60.924739 -90.68… #> $ health_self_assessment                               <int> 5, 3, 3, 5, 5, 2,… #> $ file_upload                                          <chr> NA, NA, NA, NA, \"…"},{"path":"/articles/wrangling-survey-responses.html","id":"locationpoint-type","dir":"Articles","previous_headings":"Data cleaning","what":"Location/Point type","title":"Data wrangling of responses","text":"geographic point question type respondents can pick location map, response returned character vector contains following elements separated whitespace: latitude longitude altitude accuracy seperate individual components, can use tidyr::seperate:","code":"head(submissions_df$locate_hamburg) #> [1] \"60.924739 -90.682977 0 0\"    \"34.461879 -126.200905 0 0\"   #> [3] \"48.52047 70.320327 0 0\"      \"64.520727 52.758186 0 0\"     #> [5] \"62.289722 42.957603 0 0\"     \"53.540416 10.037051 0.8 0.1\" # define the new column names new_column_names <-   paste(\"locate_hamburg\", c(\"lat\", \"lon\", \"altitude\", \"accuracy\"), sep = \"_\")  # use separate to split the column into four columns submissions_df <- submissions_df %>%   separate(locate_hamburg, new_column_names, sep = \" \") %>%   mutate(across(starts_with(\"locate_hamburg\"), as.numeric)) # convert to double # inspect the result submissions_df %>%   select(starts_with(\"locate_hamburg\")) #> # A tibble: 8 × 4 #>   locate_hamburg_lat locate_hamburg_lon locate_hamburg_altitude locate_hamburg_… #>                <dbl>              <dbl>                   <dbl>            <dbl> #> 1              60.9               -90.7                     0                0   #> 2              34.5              -126.                      0                0   #> 3              48.5                70.3                     0                0   #> 4              64.5                52.8                     0                0   #> 5              62.3                43.0                     0                0   #> 6              53.5                10.0                     0.8              0.1 #> 7              -6.50               85.0                     0                0   #> 8              53.1                11.1                     0                0"},{"path":"/articles/wrangling-survey-responses.html","id":"rating-questions","dir":"Articles","previous_headings":"Data cleaning","what":"Rating questions","title":"Data wrangling of responses","text":"rating questions - question type corresponding Likert scale type question matrices - one column returned “subquestion”. example:  returned six columns starting question label whole question, case importance_in_life: overall question label label “subquestion” divided ‘/’. important detail data cleaning allows us use functions like tidyr::pivot_longer bring data long format (e.g. useful plotting):  can wrap approach function:","code":"submissions_df %>%    select(starts_with(\"importance_in_life\")) #> # A tibble: 8 × 6 #>   `importance_in_life/Polit…` `importance_in…` `importance_in…` `importance_in…` #>                         <int>            <int>            <int>            <int> #> 1                           1                1                2                1 #> 2                           3                2                3                3 #> 3                           2                2                1                3 #> 4                           3                3                2                2 #> 5                           3                2                3                3 #> 6                           3                1                2                3 #> 7                          NA                1               NA               NA #> 8                           1                2                2                3 #> # … with 2 more variables: `importance_in_life/Leisure_time` <int>, #> #   `importance_in_life/Work` <int> imp_life_long <- submissions_df %>%   select(id, starts_with(\"importance_in_life\")) %>%   pivot_longer(-id, names_to = \"category\", values_to = \"level\") %>%   mutate(category = str_remove(category, \"importance_in_life/\") %>% str_replace_all(\"_\", \" \")) imp_life_long #> # A tibble: 48 × 3 #>       id category                  level #>    <int> <chr>                     <int> #>  1   482 Politics                      1 #>  2   482 Friends and acquaintances     1 #>  3   482 Family                        2 #>  4   482 Religion                      1 #>  5   482 Leisure time                  1 #>  6   482 Work                          1 #>  7   484 Politics                      3 #>  8   484 Friends and acquaintances     2 #>  9   484 Family                        3 #> 10   484 Religion                      3 #> # … with 38 more rows library(ggplot2) imp_life_long %>%   group_by(category) %>%   summarize(mean_level = mean(level, na.rm = TRUE)) %>%   ggplot(aes(x = category, y = mean_level)) +   geom_col() +   coord_flip() +   labs(title = \"Mean importance in life by category\", y = \"mean importance\", x = \"category\") pivot_longer_rating <- function(data, question_name) {   data %>%     select(id, starts_with(question_name)) %>%     pivot_longer(-id, names_to = \"category\", values_to = \"level\") %>%     mutate(category = str_remove(category, paste0(question_name, \"/\")) %>% str_replace_all(\"_\", \" \")) }  submissions_df %>%   pivot_longer_rating(\"trust_in_groups\") #> # A tibble: 48 × 3 #>       id category                           level #>    <int> <chr>                              <int> #>  1   482 Your family                            1 #>  2   482 People you know personally             2 #>  3   482 People you meet for the first time     3 #>  4   482 People of another nationality          2 #>  5   482 People in your neighborhood            3 #>  6   482 People of another religion             2 #>  7   484 Your family                            2 #>  8   484 People you know personally             2 #>  9   484 People you meet for the first time     2 #> 10   484 People of another nationality          3 #> # … with 38 more rows"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dimitri Marinelli. Author. Lada Rudnitckaia. Author. Malte Kyhos. Author. Timm Hamm. Author. Frie Preu. Author, maintainer. CorrelAid e.V.. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marinelli D, Rudnitckaia L, Kyhos M, Hamm T, Preu F (2022). kbtbr: Wrapper KoBoToolbox API. R package version 0.0.3000, https://github.com/CorrelAid/kbtbr/.","code":"@Manual{,   title = {kbtbr: A Wrapper for the KoBoToolbox API},   author = {Dimitri Marinelli and Lada Rudnitckaia and Malte Kyhos and Timm Hamm and Frie Preu},   year = {2022},   note = {R package version 0.0.3000},   url = {https://github.com/CorrelAid/kbtbr/}, }"},{"path":"/index.html","id":"kbtbr","dir":"","previous_headings":"","what":"A Wrapper for the KoBoToolbox API","title":"A Wrapper for the KoBoToolbox API","text":"kbtbr wrapper KoBoToolbox APIs. focuses API v2 also makes use v1 required (currently dependencies v1). kbtbr allows pull answers surveys directly R session also lets create clone assets import XLS forms straight R console. Finally, provides flexible low-level functions implement functionalities currently missing package .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Wrapper for the KoBoToolbox API","text":"kbtbr CRAN yet. can install current version GitHub: Install development version (unstable!)","code":"remotes::install_github(\"CorrelAid/kbtbr\") remotes::install_github(\"CorrelAid/kbtbr\", ref = \"dev\")"},{"path":"/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"A Wrapper for the KoBoToolbox API","text":"See Get started articles examples!","code":"library(kbtbr) # replace with https://kobo.humanitarianresponse.info for the humanitarian server or your own if you self-host base_url_v2 <- \"https://kf.kobotoolbox.org\"  token <- Sys.getenv(\"KBTBR_TOKEN\")  kobo <- Kobo$new(base_url_v2, base_url_v1, token) kobo$get_surveys()"},{"path":"/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"A Wrapper for the KoBoToolbox API","text":"following limitations kbtbr known developers: endpoints dedicated functions Kobo class. conscious choice. Implementing high-level functions endpoints lot work. support pagination","code":""},{"path":"/index.html","id":"contributing-to-kbtbr","dir":"","previous_headings":"","what":"Contributing to kbtbr","title":"A Wrapper for the KoBoToolbox API","text":"Please refer CONTRIBUTING.md.","code":""},{"path":"/reference/Asset.html","id":null,"dir":"Reference","previous_headings":"","what":"Asset\nClass to hold an asset — Asset","title":"Asset\nClass to hold an asset — Asset","text":"Asset Class hold asset Asset Class hold asset","code":""},{"path":"/reference/Asset.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Asset\nClass to hold an asset — Asset","text":"uid uid asset. name name asset. asset_url asset_url asset. takes form assets/uid/ Contains information asset meta data, permissions, xls form content links related endpoints. data_url data_url asset. can used get data related asset. useful asset type survey URL gives access submissions survey. owner_username username owner asset. type type asset. Type asset, e.g. survey, question, block template.","code":""},{"path":[]},{"path":"/reference/Asset.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Asset\nClass to hold an asset — Asset","text":"Asset$new() Asset$get_submissions() Asset$to_list() Asset$clone()","code":""},{"path":[]},{"path":"/reference/Asset.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asset\nClass to hold an asset — Asset","text":"","code":"Asset$new(asset_list, kobo)"},{"path":"/reference/Asset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asset\nClass to hold an asset — Asset","text":"asset_list list. list asset data, obtained call assets/id kobo Kobo instance. Instance class Kobo used internally make requests API. get_submissions","code":""},{"path":"/reference/Asset.html","id":"method-get-submissions-","dir":"Reference","previous_headings":"","what":"Method get_submissions()","title":"Asset\nClass to hold an asset — Asset","text":"get submissions survey/form","code":""},{"path":"/reference/Asset.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Asset\nClass to hold an asset — Asset","text":"","code":"Asset$get_submissions()"},{"path":"/reference/Asset.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Asset\nClass to hold an asset — Asset","text":"tibble. submissions tibble. submissions made yet, tibble columns. to_list","code":""},{"path":[]},{"path":"/reference/Asset.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Asset\nClass to hold an asset — Asset","text":"","code":"Asset$to_list()"},{"path":"/reference/Asset.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Asset\nClass to hold an asset — Asset","text":"list representation asset","code":""},{"path":"/reference/Asset.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Asset\nClass to hold an asset — Asset","text":"objects class cloneable method.","code":""},{"path":"/reference/Asset.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Asset\nClass to hold an asset — Asset","text":"","code":"Asset$clone(deep = FALSE)"},{"path":"/reference/Asset.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asset\nClass to hold an asset — Asset","text":"deep Whether make deep clone.","code":""},{"path":"/reference/Kobo.html","id":null,"dir":"Reference","previous_headings":"","what":"Kobo Class — Kobo","title":"Kobo Class — Kobo","text":"Interface class Kobo API can handle KoboClient instances (sessions) API versions. Class exposes generic specific methods HTTP requests / interactions various endpoints.","code":""},{"path":"/reference/Kobo.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Kobo Class — Kobo","text":"session_v2 KoboClient session v2 API session_v1 KoboClient session v1 API","code":""},{"path":[]},{"path":"/reference/Kobo.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kobo Class — Kobo","text":"Kobo$new() Kobo$get() Kobo$post() Kobo$get_assets() Kobo$get_surveys() Kobo$get_asset() Kobo$get_submissions() Kobo$clone_asset() Kobo$deploy_asset() Kobo$import_xls_form() Kobo$create_asset() Kobo$clone()","code":""},{"path":"/reference/Kobo.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Kobo Class — Kobo","text":"Initialization method class \"Kobo\".","code":""},{"path":"/reference/Kobo.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$new(   base_url_v2 = NULL,   base_url_v1 = NULL,   kobo_token = Sys.getenv(\"KBTBR_TOKEN\"),   session_v2 = NULL,   session_v1 = NULL )"},{"path":"/reference/Kobo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"base_url_v2 character. base URL API version 2 (known /api/v2). example: https://kobo.correlaid.org. base_url_v1 character. base URL API KoBoCAT API (also known /api/v1). Defaults NULL. example: https://kc.correlaid.org. kobo_token character. API token. Defaults requesting systen environment KBTBR_TOKEN. session_v2 KoboClient pass directly KoboClient instance API version v2. session_v1 KoboClient addition session_v2 one can pass also KoboClient instance API version v1.","code":""},{"path":"/reference/Kobo.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Kobo Class — Kobo","text":"Wrapper GET method internal session objects.","code":""},{"path":"/reference/Kobo.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$get(path, query = list(), version = \"v2\", format = \"json\", parse = TRUE)"},{"path":"/reference/Kobo.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"path character. Path component endpoint. query list. named list parsed query component. order hierarchical. version character. Indicates API version request executed (available: v1, v2). Defaults v2. format character. format request server. either 'json' 'csv'. defaults 'json' parse whether parse HTTP response. defaults TRUE.","code":""},{"path":"/reference/Kobo.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"list encoding json server reply parse=TRUE. Otherwise, returns server response crul::HttpResponse object.","code":""},{"path":"/reference/Kobo.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"Kobo Class — Kobo","text":"Wrapper POST method internal session objects.","code":""},{"path":"/reference/Kobo.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$post(path, body, version = \"v2\")"},{"path":"/reference/Kobo.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"path character. Path component endpoint. body R list. data payload sent server. version character. Indicates API version request executed (available: v1, v2). Defaults v2.","code":""},{"path":"/reference/Kobo.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/Kobo.html","id":"method-get-assets-","dir":"Reference","previous_headings":"","what":"Method get_assets()","title":"Kobo Class — Kobo","text":"Returns list assets available server tibble","code":""},{"path":"/reference/Kobo.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$get_assets()"},{"path":"/reference/Kobo.html","id":"method-get-surveys-","dir":"Reference","previous_headings":"","what":"Method get_surveys()","title":"Kobo Class — Kobo","text":"High-level GET request surveys endpoints endpoint","code":""},{"path":"/reference/Kobo.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$get_surveys(show_all_cols = FALSE)"},{"path":"/reference/Kobo.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"show_all_cols true returns columns available asset","code":""},{"path":"/reference/Kobo.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"user-friendly summary available surveys tibble","code":""},{"path":"/reference/Kobo.html","id":"method-get-asset-","dir":"Reference","previous_headings":"","what":"Method get_asset()","title":"Kobo Class — Kobo","text":"Get asset given id.","code":""},{"path":"/reference/Kobo.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$get_asset(id)"},{"path":"/reference/Kobo.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"id character. ID asset within Kobo API.","code":""},{"path":"/reference/Kobo.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Asset. object class Asset","code":""},{"path":"/reference/Kobo.html","id":"method-get-submissions-","dir":"Reference","previous_headings":"","what":"Method get_submissions()","title":"Kobo Class — Kobo","text":"Get submissions survey.","code":""},{"path":"/reference/Kobo.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$get_submissions(id)"},{"path":"/reference/Kobo.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"id character. ID survey asset within Kobo API.","code":""},{"path":"/reference/Kobo.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"tibble. submissions tibble. submissions made yet, tibble columns. High-level POST request clone asset. assets endpoint (due default v2, specification needed).","code":""},{"path":[]},{"path":"/reference/Kobo.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$clone_asset(clone_from, new_name, asset_type)"},{"path":"/reference/Kobo.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"clone_from character. UID asset cloned. new_name character. Name new asset. asset_type character. Type new asset. Can \"block\", \"question\", \"survey\", \"template\".","code":""},{"path":"/reference/Kobo.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/Kobo.html","id":"method-deploy-asset-","dir":"Reference","previous_headings":"","what":"Method deploy_asset()","title":"Kobo Class — Kobo","text":"High-level POST request deploy asset. assets/{uid}/deployment/ endpoint (due default v2, specification needed).","code":""},{"path":"/reference/Kobo.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$deploy_asset(uid)"},{"path":"/reference/Kobo.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"uid character. UID asset deployed.","code":""},{"path":"/reference/Kobo.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/Kobo.html","id":"method-import-xls-form-","dir":"Reference","previous_headings":"","what":"Method import_xls_form()","title":"Kobo Class — Kobo","text":"High-level POST request import XLS form. imports endpoint (due default v2, specification needed).","code":""},{"path":"/reference/Kobo.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$import_xls_form(name, file_path)"},{"path":"/reference/Kobo.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"name character. Name new asset. file_path character. path XLS form file.","code":""},{"path":"/reference/Kobo.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/Kobo.html","id":"method-create-asset-","dir":"Reference","previous_headings":"","what":"Method create_asset()","title":"Kobo Class — Kobo","text":"High-level POST request create empty asset. assets/ endpoint (due default v2, specification needed).","code":""},{"path":"/reference/Kobo.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$create_asset(   name,   asset_type,   description = \"\",   sector = list(label = \"\", value = \"\"),   country = list(label = \"\", value = \"\"),   share_metadata = FALSE )"},{"path":"/reference/Kobo.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"name character. Name new asset. asset_type character. Type new asset. Can \"block\", \"question\", \"survey\", \"template\". description character. Optional. sector list elements label value. Optional. Corresponding labels values can found . country list elements label value. Optional. Corresponding labels values can found . share_metadata boolean. Optional.","code":""},{"path":"/reference/Kobo.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Kobo Class — Kobo","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/Kobo.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kobo Class — Kobo","text":"objects class cloneable method.","code":""},{"path":"/reference/Kobo.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Kobo Class — Kobo","text":"","code":"Kobo$clone(deep = FALSE)"},{"path":"/reference/Kobo.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kobo Class — Kobo","text":"deep Whether make deep clone.","code":""},{"path":"/reference/KoboClient.html","id":null,"dir":"Reference","previous_headings":"","what":"KoboClient — KoboClient","title":"KoboClient — KoboClient","text":"class interact KoboToolbox API, extending crul::HttpClient.","code":""},{"path":"/reference/KoboClient.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"KoboClient — KoboClient","text":"crul::HttpClient -> KoboClient","code":""},{"path":"/reference/KoboClient.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"KoboClient — KoboClient","text":"crul::HttpClient$delete() crul::HttpClient$handle_pop() crul::HttpClient$head() crul::HttpClient$patch() crul::HttpClient$print() crul::HttpClient$put() crul::HttpClient$retry() crul::HttpClient$url_fetch() crul::HttpClient$verb()","code":""},{"path":"/reference/KoboClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"KoboClient — KoboClient","text":"KoboClient$new() KoboClient$get() KoboClient$post() KoboClient$clone()","code":""},{"path":"/reference/KoboClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"KoboClient — KoboClient","text":"Initialization method class \"KoboClient\".","code":""},{"path":"/reference/KoboClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KoboClient — KoboClient","text":"","code":"KoboClient$new(base_url, kobo_token = Sys.getenv(\"KBTBR_TOKEN\"))"},{"path":"/reference/KoboClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KoboClient — KoboClient","text":"base_url character. full base URL API. kobo_token character. API token. Defaults requesting system environment variable KBTBR_TOKEN.","code":""},{"path":"/reference/KoboClient.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"KoboClient — KoboClient","text":"Perform GET request (additional checks)","code":""},{"path":"/reference/KoboClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"KoboClient — KoboClient","text":"","code":"KoboClient$get(path, query = list(), ...)"},{"path":"/reference/KoboClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"KoboClient — KoboClient","text":"path character. Path component endpoint. query list. named list parsed query component. order hierarchical. ... crul-options. Additional option arguments, see crul::HttpClient reference","code":""},{"path":"/reference/KoboClient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KoboClient — KoboClient","text":"Extension crul::HttpClient$get() method checks HttpResponse object status, type application/json, parses response text subsequently JSON R list representation.","code":""},{"path":"/reference/KoboClient.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"KoboClient — KoboClient","text":"server response crul::HttpResponse object.","code":""},{"path":"/reference/KoboClient.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"KoboClient — KoboClient","text":"Perform POST request","code":""},{"path":"/reference/KoboClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"KoboClient — KoboClient","text":"","code":"KoboClient$post(path, body, ...)"},{"path":"/reference/KoboClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"KoboClient — KoboClient","text":"path character. Path component endpoint. body R list. data payload sent server. ... crul-options. Additional option arguments, see crul::HttpClient reference","code":""},{"path":"/reference/KoboClient.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"KoboClient — KoboClient","text":"Extension crul::HttpClient$post() method.","code":""},{"path":"/reference/KoboClient.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"KoboClient — KoboClient","text":"Returns object class crul::HttpResponse.","code":""},{"path":"/reference/KoboClient.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"KoboClient — KoboClient","text":"objects class cloneable method.","code":""},{"path":"/reference/KoboClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"KoboClient — KoboClient","text":"","code":"KoboClient$clone(deep = FALSE)"},{"path":"/reference/KoboClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"KoboClient — KoboClient","text":"deep Whether make deep clone.","code":""},{"path":"/reference/list_as_json_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert R list to JSON-like string — list_as_json_char","title":"Helper function to convert R list to JSON-like string — list_as_json_char","text":"Converts R lists JSON-like strings POST request's body. #' @keywords internal Converts R list JSON-like string.","code":""},{"path":"/reference/list_as_json_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert R list to JSON-like string — list_as_json_char","text":"","code":"list_as_json_char(list)  list_as_json_char(list)"},{"path":"/reference/list_as_json_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to convert R list to JSON-like string — list_as_json_char","text":"list R list converted.","code":""},{"path":"/reference/list_as_json_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to convert R list to JSON-like string — list_as_json_char","text":"JSON-like string","code":""},{"path":"/reference/list_as_json_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to convert R list to JSON-like string — list_as_json_char","text":"","code":"if (FALSE) { example_body <- list_as_json_char(list(     \"name\" = \"A survey object created via API/R\",     \"asset_type\" = \"survey\" )) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]

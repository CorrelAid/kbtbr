% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kobo.R
\name{Kobo}
\alias{Kobo}
\title{Kobo Class}
\description{
Interface class for the Kobo API that can handle \link{KoboClient} instances
(sessions) for both API versions.
The Class exposes both generic and specific methods for HTTP requests /
interactions with the various endpoints.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{session_v2}}{\link{KoboClient} session for v2 of the API}

\item{\code{session_v1}}{\link{KoboClient} session for v1 of the API}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Kobo$new()}}
\item \href{#method-get}{\code{Kobo$get()}}
\item \href{#method-get_paginated}{\code{Kobo$get_paginated()}}
\item \href{#method-post}{\code{Kobo$post()}}
\item \href{#method-get_assets}{\code{Kobo$get_assets()}}
\item \href{#method-get_surveys}{\code{Kobo$get_surveys()}}
\item \href{#method-get_asset}{\code{Kobo$get_asset()}}
\item \href{#method-get_submissions}{\code{Kobo$get_submissions()}}
\item \href{#method-clone_asset}{\code{Kobo$clone_asset()}}
\item \href{#method-deploy_asset}{\code{Kobo$deploy_asset()}}
\item \href{#method-import_xls_form}{\code{Kobo$import_xls_form()}}
\item \href{#method-create_asset}{\code{Kobo$create_asset()}}
\item \href{#method-clone}{\code{Kobo$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialization method for class "Kobo".
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$new(
  base_url_v2 = NULL,
  base_url_v1 = NULL,
  kobo_token = Sys.getenv("KBTBR_TOKEN"),
  session_v2 = NULL,
  session_v1 = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_url_v2}}{character. The base URL of the API version 2
(known as /api/v2). For example: https://kobo.correlaid.org.}

\item{\code{base_url_v1}}{character. The base URL of the API of your KoBoCAT
API (also known as /api/v1). Defaults to NULL.
For example: https://kc.correlaid.org.}

\item{\code{kobo_token}}{character. The API token. Defaults to requesting
the systen environment \code{KBTBR_TOKEN}.}

\item{\code{session_v2}}{\link{KoboClient}. Alternatively, pass directly
a \link{KoboClient} instance for the API version v2.}

\item{\code{session_v1}}{KoboKlient. In addition to session_v2 one can pass
also a \link{KoboClient} instance for the API version v1.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Wrapper for the GET method of internal session objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get(path, query = list(), version = "v2", format = "json", parse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{character. Path component of the endpoint.}

\item{\code{query}}{list. A named list which is parsed to the query
component. The order is not hierarchical.}

\item{\code{version}}{character. Indicates on which API version the request should be executed (available: \code{v1}, \code{v2}). Defaults to \code{v2}.}

\item{\code{format}}{character. the format to request from the server. either 'json' or 'csv'. defaults to 'json'}

\item{\code{parse}}{whether or not to parse the HTTP response. defaults to TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list encoding of the json server reply if parse=TRUE.
Otherwise, it returns the server response as a \link[crul:HttpResponse]{crul::HttpResponse}
object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_paginated"></a>}}
\if{latex}{\out{\hypertarget{method-get_paginated}{}}}
\subsection{Method \code{get_paginated()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get_paginated(path, query, version = "v2", format = "json", parse = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-post"></a>}}
\if{latex}{\out{\hypertarget{method-post}{}}}
\subsection{Method \code{post()}}{
Wrapper for the POST method of internal session objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$post(path, body, version = "v2")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{character. Path component of the endpoint.}

\item{\code{body}}{R list. A data payload to be sent to the server.}

\item{\code{version}}{character. Indicates on which API version the request
should be executed (available: \code{v1}, \code{v2}). Defaults to \code{v2}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_assets"></a>}}
\if{latex}{\out{\hypertarget{method-get_assets}{}}}
\subsection{Method \code{get_assets()}}{
Returns a list of all assets available in the server as tibble
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get_assets()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_surveys"></a>}}
\if{latex}{\out{\hypertarget{method-get_surveys}{}}}
\subsection{Method \code{get_surveys()}}{
High-level GET request for \code{surveys} endpoints endpoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get_surveys(show_all_cols = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{show_all_cols}}{if true returns all the columns available
for an asset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An user-friendly summary of the available surveys as a tibble
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_asset"></a>}}
\if{latex}{\out{\hypertarget{method-get_asset}{}}}
\subsection{Method \code{get_asset()}}{
Get an asset given its id.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get_asset(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character. ID of the asset within the Kobo API.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Asset. object of class \link{Asset}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_submissions"></a>}}
\if{latex}{\out{\hypertarget{method-get_submissions}{}}}
\subsection{Method \code{get_submissions()}}{
Get the submissions for a survey.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$get_submissions(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character. ID of the survey asset within the Kobo API.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
tibble. submissions as a tibble. if no submissions were made yet, the tibble will have no columns.
High-level POST request to clone an asset. \code{assets} endpoint
(due to default to \code{v2}, no further specification is needed).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone_asset"></a>}}
\if{latex}{\out{\hypertarget{method-clone_asset}{}}}
\subsection{Method \code{clone_asset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$clone_asset(clone_from, new_name, asset_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{clone_from}}{character. UID of the asset to be cloned.}

\item{\code{new_name}}{character. Name of the new asset.}

\item{\code{asset_type}}{character. Type of the new asset. Can be
"block", "question", "survey", "template".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deploy_asset"></a>}}
\if{latex}{\out{\hypertarget{method-deploy_asset}{}}}
\subsection{Method \code{deploy_asset()}}{
High-level POST request to deploy an asset.
\verb{assets/\{uid\}/deployment/} endpoint (due to
default to \code{v2}, no further specification is needed).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$deploy_asset(uid)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uid}}{character. UID of the asset to be deployed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-import_xls_form"></a>}}
\if{latex}{\out{\hypertarget{method-import_xls_form}{}}}
\subsection{Method \code{import_xls_form()}}{
High-level POST request to import an XLS form. \code{imports} endpoint
(due to default to \code{v2}, no further specification is needed).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$import_xls_form(name, file_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{character. Name of the new asset.}

\item{\code{file_path}}{character. The path to the XLS form file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_asset"></a>}}
\if{latex}{\out{\hypertarget{method-create_asset}{}}}
\subsection{Method \code{create_asset()}}{
High-level POST request to create an empty asset. \verb{assets/} endpoint
(due to default to \code{v2}, no further specification is needed).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$create_asset(
  name,
  asset_type,
  description = "",
  sector = list(label = "", value = ""),
  country = list(label = "", value = ""),
  share_metadata = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{character. Name of the new asset.}

\item{\code{asset_type}}{character. Type of the new asset. Can be
"block", "question", "survey", "template".}

\item{\code{description}}{character. Optional.}

\item{\code{sector}}{A list with elements \code{label} and \code{value}.
Optional. Corresponding labels and values can be found
\href{https://github.com/kobotoolbox/kpi/blob/master/kobo/static_lists.py}{here}.}

\item{\code{country}}{A list with elements \code{label} and \code{value}.
Optional. Corresponding labels and values can be found
\href{https://github.com/kobotoolbox/kpi/blob/master/kobo/static_lists.py}{here}.}

\item{\code{share_metadata}}{boolean. Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kobo$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kobo-client.R
\name{KoboClient}
\alias{KoboClient}
\title{KoboClient}
\description{
A class to interact with the KoboToolbox API, extending \code{\link[crul:HttpClient]{crul::HttpClient}}.
}
\section{Super class}{
\code{\link[crul:HttpClient]{crul::HttpClient}} -> \code{KoboClient}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KoboClient-new}{\code{KoboClient$new()}}
\item \href{#method-KoboClient-get}{\code{KoboClient$get()}}
\item \href{#method-KoboClient-post}{\code{KoboClient$post()}}
\item \href{#method-KoboClient-clone}{\code{KoboClient$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="delete"><a href='../../crul/html/HttpClient.html#method-HttpClient-delete'><code>crul::HttpClient$delete()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="handle_pop"><a href='../../crul/html/HttpClient.html#method-HttpClient-handle_pop'><code>crul::HttpClient$handle_pop()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="head"><a href='../../crul/html/HttpClient.html#method-HttpClient-head'><code>crul::HttpClient$head()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="patch"><a href='../../crul/html/HttpClient.html#method-HttpClient-patch'><code>crul::HttpClient$patch()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="print"><a href='../../crul/html/HttpClient.html#method-HttpClient-print'><code>crul::HttpClient$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="put"><a href='../../crul/html/HttpClient.html#method-HttpClient-put'><code>crul::HttpClient$put()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="retry"><a href='../../crul/html/HttpClient.html#method-HttpClient-retry'><code>crul::HttpClient$retry()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="url_fetch"><a href='../../crul/html/HttpClient.html#method-HttpClient-url_fetch'><code>crul::HttpClient$url_fetch()</code></a></span></li>
<li><span class="pkg-link" data-pkg="crul" data-topic="HttpClient" data-id="verb"><a href='../../crul/html/HttpClient.html#method-HttpClient-verb'><code>crul::HttpClient$verb()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KoboClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-KoboClient-new}{}}}
\subsection{Method \code{new()}}{
Initialization method for class "KoboClient".
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KoboClient$new(base_url, kobo_token = Sys.getenv("KBTBR_TOKEN"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_url}}{character. The full base URL of the API.}

\item{\code{kobo_token}}{character. The API token. Defaults to requesting
the system environment variable \code{KBTBR_TOKEN}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KoboClient-get"></a>}}
\if{latex}{\out{\hypertarget{method-KoboClient-get}{}}}
\subsection{Method \code{get()}}{
Perform a GET request (with additional checks)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KoboClient$get(path, query = list(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{character. Path component of the endpoint.}

\item{\code{query}}{list. A named list which is parsed to the query
component. The order is not hierarchical.}

\item{\code{...}}{crul-options. Additional option arguments, see
\code{\link[crul:HttpClient]{crul::HttpClient}} for reference}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Extension of the \code{crul::HttpClient$get()} method that checks
the HttpResponse object on status, that it is of type
\code{application/json}, and parses the response text subsequently from
JSON to R list representation.
}

\subsection{Returns}{
the server response as a crul::HttpResponse object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KoboClient-post"></a>}}
\if{latex}{\out{\hypertarget{method-KoboClient-post}{}}}
\subsection{Method \code{post()}}{
Perform a POST request
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KoboClient$post(path, body, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{character. Path component of the endpoint.}

\item{\code{body}}{R list. A data payload to be sent to the server.}

\item{\code{...}}{crul-options. Additional option arguments, see
\code{\link[crul:HttpClient]{crul::HttpClient}} for reference}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Extension of the \code{crul::HttpClient$post()} method.
}

\subsection{Returns}{
Returns an object of class \code{crul::HttpResponse}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KoboClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KoboClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KoboClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
